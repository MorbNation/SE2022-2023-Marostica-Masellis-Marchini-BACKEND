#OH GOD SI POSSONO METTERE I COMMENTI SU YAML
swagger: '2.0'
info:
  version: 1.0.0
  title: EpiOpera API Documentation
  description: EpiOpera API Documentation
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
host: localhost:8080
basepath: /api/
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

##Components

components: 
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: tokenEpiOpera

##Tags

tags: 
  - name: Utenti
    description: APIs for the Utente class
  - name: Post
    description: APIs for the Post class
  - name: Commenti Post
    description: APIs for the Commento_Post class
  - name: Commenti Profilo
    description: APIs for the Commento_Profilo class

##APIs begin

paths:

#Utente APIs begin

  /api/utente/{user}:
    get:
      tags:
        - Utenti
      summary: Retrieves a user registered to the database
      parameters:
        - name: user
          in: path
          description: Username of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Utente'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

    delete:
      tags:
        - Utenti
      summary: Deletes a user from the database by username, requires authentication via login API
      parameters:
        - name: user
          in: path
          description: The username of the user to delete
          required: true
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/utente:

    post:
      tags:
        - Utenti
      summary: Register a new user in the database
      parameters:
        - name: body
          in: body
          description: Attributes of the new user to be registered
          required: true
          schema:
            $ref: '#/definitions/Utente'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Utente'
        '400':
          description: Invalid input
        '409':
          description: User already exists
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/utente/all:
    
    get:
      tags:
        - Utenti
      summary: Retrieves all users registered on the database
      responses:
        '200':
          description: OK
          schema:
            $ref:  '#/definitions/Utente'
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/utente/login:
    put:
      tags: 
        - Utenti
      summary: Generates a new login token for the user
      parameters:
        - name: body
          in: body
          description: Username and password of user to login
          required: true
          schema:
            properties:
              username:
                type: string
              password: 
                type: string
      responses:
        '200':
          description: OK
          schema:
            token:
              type: string
            username:
              type: string
        '401':
          description: Wrong password
        '404':
          description: User not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/
  
  /api/utente/logout:
    put:
      tags:
        - Utenti
      summary: Logs out a user by clearing the associated cookie
      responses:
        '200':
          description: OK
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/utente/segui:
    put: 
      tags:
        - Utenti
      summary: Associates a user to the requesting user's followed list, requires authentication via login API
      parameters:
        - name: body
          in: body
          description: Username of user to be followed
          required: true
          schema:
            properties:
              utenteDaSeguire:
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            IsFollowing:
              type: boolean
        '404':
          description: User not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/
  
  /api/utente/modificaMail:
    put:
      tags:
        - Utenti
      summary: Change the mail field of a logged in user, requires authentication via login API
      parameters: 
        - name: body
          in: body
          description: New mail
          required: true
          schema:
            properties:
              email:
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            email:
              type: string
        '400':
          description: Bad email format
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/utente/modificaPassword:
    put:
      tags:
        - Utenti
      summary: Change the password field of a logged in user, requires authentication via login API
      parameters: 
        - name: body
          in: body
          description: New password
          required: true
          schema:
            properties:
              newPassword:
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad password format
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/
        
  /api/utente/modificaNSFW:
    put:
      tags:
        - Utenti
      summary: Change the NSFW setting of a user, requires authentication via login API
      parameters:
        - name: body
          in: body
          description: New NSFW setting
          required: true
          schema:
            properties:
              nsfw: 
                type: string
      security:
        - cookieAuth: []
      responses:  
        '200':
          description: OK
          schema:
            nsfw:
              type: string
        '400':
          description: Invalid NSFW setting
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/utente/cambiaLingua:
    put:
      tags:
        - Utenti
      summary: Change the language setting of a user, requires authentication via login API
      parameters:
        - name: body
          in: body
          description: New language setting
          required: true
          schema:
            properties:
              lingua: 
                type: string
      security:
        - cookieAuth: []
      responses:  
        '200':
          description: OK
          schema:
            lingua:
              type: string
        '400':
          description: Invalid setting
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/
        
#Utente APIs end

#Post APIs begin

  /api/posts:

    get:
      tags:
        - Post
      summary: Retrives all posts in the database
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Post'
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/post/id/{id}:

    get:
      tags: 
        - Post
      summary: Retrieves a post by its Id
      parameters:
        - name: id
          in: path
          description: The id of the post to retrieve
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Post'
        '404':
          description: Post not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/post/user/{user}:

    get: 
      tags:
        - Post
      summary: Retrieves all posts posted by a user
      parameters: 
        - name: user
          in: path
          description: The username of the post's author
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Post'
        '404':
          description: User does not exist
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/post/segnala:

    put:
      tags:
        - Post
      summary: Flags a post, requires authentication via login API
      parameters:
        - name: body
          in: body
          description: The ID of the post to flag
          required: true
          schema:
            properties:
              id:
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema: 
            id:
              type: string
        '404':
          description: Post not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/post/valuta: 

    put:
      tags:
        - Post
      summary: Increments or decrements a post's score, requires authentication via login API
      description: The function requires the id of the post to be evaluated and the vote (-1, 0, 1)
      parameters:
        - name: body
          in: body
          description: The ID of the post to flag and evaluation (-1, 1)
          required: true
          schema:
            properties:
              id: 
                type: string
              valutazione:
                type: number
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            PunteggioPost:
              type: number
            ValutazioneAttuale: 
              type: number
        '404':
          description: Resource not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/post/modifica:

    put:
      tags:
        - Post
      summary: Edits a post, requires authentication via login API
      parameters:
        - name: body
          in: body
          description: Modifiable attributes of a post
          required: true
          schema:
            properties: 
              id: 
                type: string
              titolo:
                type: string
              testo:
                type: string
              media:
                type: string
              tag:
                type: array
                items:
                  type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Post'
        '401':
          description: Unauthorized
        '404':
          description: Post not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/post/salvaNeiFavoriti:

    put:
      tags:
        - Post
      summary: Saves a post in a user's favourites, requires authentication via login API
      description: A post's editable attributes are the title, the text, the media and tags
      parameters:
        - name: body
          in: body
          description: The ID of the post to save
          required: true
          schema:
            properties:
              id: 
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            id:
              type: string
            username:
              type: string
        '404':
          description: Post not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/post:

    post:
      tags:
        - Post
      summary: Uploads a new post to the database, requires authentication via login API
      parameters:
        - name: body
          in: body
          description: Attributes of the new post to be uploaded
          required: true
          schema:
            $ref: '#/definitions/Post'
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            Id:
              type: string
        '400':
          description: Post already exists
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/post/{id}:

    delete:
      tags:
        - Post
      summary: Deletes a post by its id
      parameters:
        - name: id
          in: path
          description: The id of post to delete
          required: true
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            id:
              type: string
        '401':
          description: Unauthorized
        '404':
          description: Post not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

#Post APIs end

#Commento_Post APIs begin

  /api/commento_post:

    post:
      tags:
        - Commenti Post
      summary: Post a new post comment, requires authentication via login API
      parameters:
        - name: body
          in: body
          description: Body of post comment post API
          required: true
          schema:
            $ref: '#/definitions/Commento_Post'
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            Id:
              type: string
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_post/all/{id}:

    get:
      tags:
        - Commenti Post
      summary: Get post comments by association Id
      parameters:
        - name: id_post
          in: path
          description: Association Id of post comment to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Commento_Post'
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_post/{id}:

    get:
      tags:
        - Commenti Post
      summary: Get a post comment by its ID
      parameters:
        - name: id
          in: path
          description: The comment's ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Commento_Post'
        '404':
          description: Comment not found
        '500':
          description: Internal server error
      headers:
        Set-Cookie:
          schema:
            type: string
            example: tokenEpiOpera=abcdef; Path=/

    delete:
      tags:
        - Commenti Post
      summary: Deletes a post comment by id, requires authentication via login API
      parameters:
        - name: id
          in: path
          description: Id of post comment to delete
          required: true
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            id:
              type: string
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_post/segnala/{id}:

    put:  
      tags: 
        - Commenti Post
      summary: Flags a post comment, requires authentication via login API
      parameters: 
        - name: body
          in: body
          description: The id of the post comment to flag
          required: true
          schema:
            properties:
              id:
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema: 
            id:
              type: string
        '404':
          description: Comment not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_post/valuta:
    put:
      tags:
        - Commenti Post
      summary: Increments or decrements a post comment's score, requires authentication via login API
      description: The function requires the id of the comment to be evaluated and the vote (-1, 0, 1)
      parameters:
        - name: body
          in: body
          description: The ID of the post comment to evaluate and the evaluation (-1, 1)
          required: true
          schema:
            properties:
              id: 
                type: string
              valutazione:
                type: number
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            PunteggioCommento:
              type: number
            ValutazioneAttuale:
              type: number
        '400':
          description: Invalid input
        '404': 
          description: Resource not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_post/modifica:
    put:
      tags:
        - Commenti Post
      summary: Edit the comment, requires authentication via login API
      description: Function requires the ID, the new text in the body
      parameters:
        - name: body
          in: body
          description: The ID of the post comment to edit and the new text
          required: true
          schema:
            properties:
              id: 
                type: string
              testo:
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            id:
              type: string
            testo:
              type: string
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

#Commento_Post APIs end

#Commento_Profilo APIs begin

  /api/commento_profilo:

    post: 
      tags:
        - Commenti Profilo
      summary: Uploads a new post comment on the database, requires authentication via login API
      parameters:
        - name: body
          in: body
          description: Attributes of the new post comment to be uploaded
          required: true
          schema:
            $ref: '#/definitions/Commento_Profilo'
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            Id:
              type: string
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_profilo/all/{user}:

    get:
      tags:
        - Commenti Profilo
      summary: Retrieves all comments on the database relating to a specific profile
      parameters:
        - name: user
          in: path
          description: The username of commented profile
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Commento_Profilo'
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_profilo/{id}:

    delete:
      tags:
        - Commenti Profilo
      summary: Deletes a profile comment by its id, requires authentication via login API
      parameters:
        - name: id
          in: path
          description: The id of the profile comment to be deleted
          required: true
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            id:
              type: string
        '401':
          description: Unauthorized
        '404': 
          description: Comment not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/
              
    get:
      tags:
        - Commenti Profilo
      summary: Retrieves a specific profile comment by its ID
      parameters:
        - name: id
          in: path
          description: The ID of the profile comment to retrieve
          required: true
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Commento_Profilo'
        '500':  
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_profilo/segnala/{id}:

    put:  
      tags: 
        - Commenti Profilo
      summary: Flags a profile comment, requires authentication via login API
      parameters: 
        - name: body
          in: body
          description: The id of the profile comment to flag
          required: true
          schema:
            properties:
              id:
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema: 
            id:
              type: string
        '404': 
          description: Comment not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_profilo/modifica:
    put:
      tags:
        - Commenti Profilo
      summary: Edit the comment, requires authentication via login API
      description: Function requires the ID, the new text in the body
      parameters:
        - name: body
          in: body
          description: The id of the profile comment to be edited, the new text and the new title
          required: true
          schema:
            properties:
              id: 
                type: string
              testo:
                type: string
              titolo:
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Commento_Profilo'
        '401':
          description: Unauthorized
        '404':
          description: Comment not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

  /api/commento_profilo/valuta:
    put:
      tags:
        - Commenti Profilo
      summary: Increments or decrements a proflie comment's score, requires authentication via login API
      description: The function requires the id of the comment to be evaluated and the vote (-1, 0, 1)
      parameters:
        - name: body
          in: body
          description: The ID of the profile post to be evaluated and the evaluation (-1, 1)
          required: true
          schema:
            properties:
              id: 
                type: string
              valutazione:
                type: number
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          schema:
            PunteggioCommento:
              type: number
            ValutazioneAttuale:
              type: number
        '400':
          description: Invalid input
        '404': 
          description: Comment not found
        '500':
          description: Internal server error
        headers:
          Set-Cookie:
            schema:
              type: string
              example: tokenEpiOpera=abcdef; Path=/

#Commento_Profilo APIs end

##APIs end

##Definitions begin

definitions:
  Utente:
    required:
      - username
    properties:
      username:
        type: string
      email:
        type: string
        example: user@something.domain
      password:
        type: string
      descrizione:
        type: string
        default: Ciao!
      icona_profilo:
        type: string
        default: DefaultPathPfp
      iconaNSFW:
        type: boolean
        default: false
      banner:
        type: string
        default: DefaultPathBanner
      bannerNSFW:
        type: boolean
        default: false
      userscore:
        type: number
        default: 0
      lingua:
        type: string
        enum:
          - italiano
          - inglese
        default: italiano
      isAmministratore:
        type: boolean
        default: false
      nsfw:
        type: string
        enum:
          - 'no'
          - blur
          - 'yes'
        default: 'no'
      utenti_seguiti:
        type: array
        items:
          type: string
      post_favoriti:
        type: array
        items:
          type: string
      

  Post:
    required:
      - id
    properties:
      id:
        type: string
      titolo:
        type: string
      data:
        type: number
      testo:
        type: string
      media:
        type: string
      tag:
        type: array
        items:
          type: string
      punteggio_post:
        type: number
        default: 0
      segnalato:
        type: boolean
        default: false
      numero_commenti:
        type: number
        default: 0
      associato_a_contest:
        type: array
        items:
          type: number
      creatore_post:
        type: string
      valutazioni:
        type: number
        additionalProperties:
          type: string
        

  Commento_Post:
    required:
      - id
        creatore_commento
    properties:
      id:
        type: string
      id_post:
        type: string
      data:
        type: number
      testo:
        type: string
      punteggio_commento:
        type: number
        default: 0
      segnalato:
        type: boolean
        default: false
      creatore_commento:
        type: string
      valutazioni:
        type: number
        additionalProperties:
          type: string

  Commento_Profilo:
    required:
      - id
        creatore_commento
    properties:
      id:
        type: string
      profilo_commentato:
        type: string
      titolo:
        type: string
      data:
        type: number
      testo: 
        type: string
      punteggio_commento:
        type: number
        default: 0
      segnalato:
        type: boolean
        default: false
      creatore_commento:  
        type: string
      valutazioni:
        type: number  
        additionalProperties:
          type: string

  Valutazione:
    required:
      - id
        username
        valutazione
    properties:
      id:
        type: string
      username:
        type: string
      valutazione:
        type: number   

##Definitions end